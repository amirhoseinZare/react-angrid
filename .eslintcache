[{"D:\\projects\\kingofday\\react-angrid\\src\\index.js":"1","D:\\projects\\kingofday\\react-angrid\\src\\App.js":"2","D:\\projects\\kingofday\\react-angrid\\src\\reportWebVitals.js":"3","D:\\projects\\kingofday\\react-angrid\\src\\data.js":"4","D:\\projects\\kingofday\\react-angrid\\src\\lib\\index.jsx":"5","D:\\projects\\kingofday\\react-angrid\\src\\lib\\components\\AnGrid.js":"6"},{"size":500,"mtime":1610975964000,"results":"7","hashOfConfig":"8"},{"size":2759,"mtime":1611350388610,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610975964000,"results":"10","hashOfConfig":"8"},{"size":494,"mtime":1611317893948,"results":"11","hashOfConfig":"8"},{"size":65,"mtime":1611348378082,"results":"12","hashOfConfig":"8"},{"size":5870,"mtime":1611346070651,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"11qx33t",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"D:\\projects\\kingofday\\react-angrid\\src\\index.js",[],["30","31"],"D:\\projects\\kingofday\\react-angrid\\src\\App.js",["32"],"import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport AnGrid from './lib/index';\n//import AnGrid from 'react-angrid';\nimport data from './data'\n\nfunction App() {\n  console.log(\"app\")\n  const [loading, setLoading] = useState(false);\n  const [rows, setRows] = useState([]);\n  const [filter, setFilter] = useState({\n    pageSize: 4,\n    pageNumber: 1,\n  });\n  const [totalCount, setTotalCount] = useState(3);\n\n  const _delete = (data) => {\n    setRows(rows.filter(x => x.userId !== data.userId))\n  }\n  const columns = [\n    {\n      field: \"userId\",\n      headerName: \"User Id\",\n      description: \"user id that is unique\",\n      width: 50,\n    },\n    {\n      field: \"fullName\",\n      headerName: \"Fullname\",\n      description: \"full name of user\",\n      width: 100,\n      sortable: true\n    },\n    {\n      field: \"age\",\n      headerName: \"Age\",\n      description: \"age of user\",\n      width: 50,\n    },\n    {\n      field: \"delete\",\n      headerName: \"delete(component cell)\",\n      description: \"delete user\",\n      width: 50,\n      renderCell: (row) => {\n        return row.data.userId === 1 ? \"-\" : <button onClick={() => _delete(row.data)}>X</button>\n      }\n    }\n  ];\n  let active = true;\n  //=== events\n  const _fetchData = async () => {\n    console.log('=== fetch data');\n    if (!active) return;\n    //mock api, you can call your api then set data to table like commented line below\n    return new Promise((resolve) => {\n      setLoading(true);\n      setTimeout(() => {\n        if (filter.pageNumber === 1)\n          setRows(data.filter(x => x.userId < 5));// Set Rows\n        else\n          setRows(data.filter(x => x.userId >= 5));// SetRows\n        setTotalCount(7);//=== set total page size for pagination part\n        resolve();\n        setLoading(false);\n      }, 2000);\n    });\n  }\n\n  useEffect(() => {\n    _fetchData();\n    return () => {\n      active = false;\n    }\n  }, [filter]);\n  const _handlePageChange = (newPage) => {\n    setFilter((p) => ({ ...p, pageNumber: newPage }));\n  }\n  return (\n    <div className=\"app\">\n      <h1>an grid</h1>\n      <p>simple data grid with paging, sorting and rtl support</p>\n      <hr />\n      <h2>minimal feature</h2>\n      <AnGrid\n        columns={columns}\n        rows={rows}\n        showRowNumber={true}\n        disabledPaging={true}\n      />\n      <h2>full feature</h2>\n      <AnGrid\n        loading={loading}\n        columns={columns}\n        rows={rows}\n        showRowNumber={true}\n        pageSize={filter.pageSize}\n        pageNumber={filter.pageNumber}\n        totalCount={totalCount}\n        onPageChange={_handlePageChange}\n        theme=\"dark\"\n        minHeight={300}\n        emptyList={<strong>There Is No Info</strong>}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","D:\\projects\\kingofday\\react-angrid\\src\\reportWebVitals.js",[],"D:\\projects\\kingofday\\react-angrid\\src\\data.js",[],"D:\\projects\\kingofday\\react-angrid\\src\\lib\\index.jsx",[],"D:\\projects\\kingofday\\react-angrid\\src\\lib\\components\\AnGrid.js",["33"],"import React, { useState, useEffect, forwardRef, useImperativeHandle, } from \"react\";\nimport './angrid.css';\nimport PropTypes from 'prop-types';\n\nconst shortText = (text, length, appender) => {\n  let textLength = text.length;\n  if (textLength > length) return text.substring(0, length) + (appender || '...');\n  return text;\n}\n\nconst AnGrid = forwardRef((props, ref) => {\n  console.log(props.rows);\n  //=== init\n  const formatData = (rawData) => [...rawData.map((r, idx) => ({\n    data: { ...r },\n    hide: r.hide || false,\n    index: idx,\n    dataRowNumber: ((props.pageNumber || 1) - 1) * (props.pageSize || 9999) + idx + 1\n  }))];\n  const strings = props.strings || {};\n  //=== Hooks\n  const [rows, setRows] = useState(props.rows ? formatData(props.rows) : []);\n  const [columns, setColumns] = useState(props.columns);\n  //=== Recoil\n  const _handlePageChange = (newPage) => {\n    if (props.onPageChange) props.onPageChange(newPage);\n  };\n\n  useEffect(() => {\n    setRows(formatData(props.rows));\n  }, [props.rows]);\n\n  //=== sort method\n  const _hanndleSort = (field) => {\n    let col = columns.find(x => x.field === field);\n    switch (col.sort) {\n      case 1:\n        console.log('1')\n        col.sort = 2;\n        setColumns([...columns]);\n        setRows(r => [...r.sort((a, b) => {\n          if (a.data[col.field].toString() < b.data[col.field].toString())\n            return -1;\n          if (a.data[col.field].toString() > b.data[col.field].toString())\n            return 1;\n          return 0;\n        })]);\n        break;\n      case 2:\n        console.log('2')\n        console.log(props.rows);\n        col.sort = 0;\n        setColumns([...columns]);\n        setRows(formatData(props.rows));\n        break;\n      default:\n        console.log('0');\n        col.sort = 1;\n        setColumns([...columns]);\n        setRows(r => [...r.sort((a, b) => {\n          if (a.data[col.field].toString() < b.data[col.field].toString())\n            return 1;\n          if (a.data[col.field].toString() > b.data[col.field].toString())\n            return -1;\n          return 0;\n        })]);\n        break;\n    }\n  }\n  useImperativeHandle(ref, () => ({\n    addRow: (row, prepend) => {\n      row[\"hide\"] = row[\"hide\"] || false;\n      if (prepend) setRows((p) => [row, ...p]);\n      else setRows((p) => [...p, row]);\n    },\n    addRows: (newRows, prepend) => {\n      if (prepend)\n        setRows((p) => [\n          ...formatData(newRows),\n          ...p,\n        ]);\n      else\n        setRows((p) => [\n          ...p,\n          ...formatData(newRows),\n        ]);\n    },\n    hideRow: (idx) => {\n      let tempRows = [...rows];\n      let row = {\n        ...tempRows[idx],\n        hide: true,\n      };\n      tempRows[idx] = row;\n      setRows((p) => [...tempRows]);\n    },\n  }));\n\n  return (\n    <div className={`angrid ${(props.theme || 'dark')} ${props.className || null} ${rows.length === 0 ? \"is-empty\" : null}`} style={{ minHeight: props.minHeight || 300, paddingBottom: (props.disabledPaging ? 45 : 0) }}>\n      {!props.loading && rows.length === 0 ? (\n        props.emptyList ? props.emptyList :\n          <p className=\"empty\">\n            {strings.notFound || \"There Is No Data\"}\n          </p>\n\n      ) : null}\n      {props.loading ?\n        <div className='loader'>\n          <div className=\"spinner\"></div>\n        </div> : null}\n      {rows.length !== 0 ? (\n        <>\n          <table>\n            <thead className='thead'>\n              <tr>\n                <th\n                  style={{ width: 25 }}\n                  title={(strings.indexTitle || \"Row Number\")}\n                >#</th>\n                {columns.map((c, idx) => (\n                  <th\n                    style={{ width: c.width || 85, cursor: c.sortable ? 'pointer' : 'auto' }}\n                    title={c.description}\n                    key={idx}\n                    {...(c.sortable ? { onClick: () => _hanndleSort(c.field) } : {})}\n                  >\n                    { shortText(c.headerName)}\n                    {c.sortable ? <span className='sort-icon'>↑↓</span> : null}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className='tbody'>\n              {rows\n                .filter((x) => !x.hide)\n                .map((r, i) => (\n                  <tr\n                    key={i}\n                    className={props.rowClass ? props.rowClass(r) : null}\n                  >\n                    {props.showRowNumber ? <td>\n                      <span>{r.dataRowNumber}</span>\n                    </td> : null}\n\n                    {columns.map((c, j) => (\n                      <td className={c.cellClass ? c.cellClass(r) : \"\"} key={j}>\n                        {c.renderCell ? c.renderCell(r) : <span>{r.data[c.field]}</span>}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n          {!props.disabledPaging ? <div className='angrid-pagination'>\n            <span>{strings.pageNumber || \"Page Number\"}</span>\n            <button\n              onClick={() => _handlePageChange(props.pageNumber - 1)}\n              disabled={props.pageNumber === 1}\n            >\n              {\"‹\"}\n            </button>\n            <strong>{props.pageNumber}</strong>\n            <button\n              onClick={() => _handlePageChange(props.pageNumber + 1)}\n              disabled={props.pageNumber * props.pageSize > props.totalCount}\n            >\n              {\"›\"}\n            </button>\n          </div> : null}\n        </>\n      ) : null\n      }\n    </div >\n  );\n});\n\nAnGrid.propTypes = {\n  columns: PropTypes.array.isRequired,\n  rows: PropTypes.array.isRequired,\n  onPageChange: PropTypes.func,\n  loading: PropTypes.bool,\n  showRowNumber: PropTypes.bool,\n  totalCount: PropTypes.number,\n  paging: PropTypes.bool,\n}\nexport default AnGrid;\n",["34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":73,"column":16,"nodeType":"42","endLine":73,"endColumn":21},{"ruleId":"40","severity":1,"message":"43","line":31,"column":6,"nodeType":"44","endLine":31,"endColumn":18,"suggestions":"45"},{"ruleId":"36","replacedBy":"46"},{"ruleId":"38","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"react-hooks/exhaustive-deps","Assignments to the 'active' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has a missing dependency: 'formatData'. Either include it or remove the dependency array.","ArrayExpression",["50"],["48"],["49"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [formatData, props.rows]",{"range":"53","text":"54"},[1004,1016],"[formatData, props.rows]"]