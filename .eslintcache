[{"D:\\projects\\kingofday\\react-angrid\\src\\index.js":"1","D:\\projects\\kingofday\\react-angrid\\src\\App.js":"2","D:\\projects\\kingofday\\react-angrid\\src\\reportWebVitals.js":"3","D:\\projects\\kingofday\\react-angrid\\src\\data.js":"4","D:\\projects\\kingofday\\react-angrid\\src\\lib\\index.jsx":"5","D:\\projects\\kingofday\\react-angrid\\src\\lib\\components\\AnGrid.js":"6"},{"size":500,"mtime":1610975964000,"results":"7","hashOfConfig":"8"},{"size":2759,"mtime":1611350388610,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610975964000,"results":"10","hashOfConfig":"8"},{"size":494,"mtime":1611317893948,"results":"11","hashOfConfig":"8"},{"size":65,"mtime":1611348378082,"results":"12","hashOfConfig":"8"},{"size":6016,"mtime":1611482299214,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"11qx33t",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\projects\\kingofday\\react-angrid\\src\\index.js",[],["28","29"],"D:\\projects\\kingofday\\react-angrid\\src\\App.js",["30"],"import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport AnGrid from './lib/index';\n//import AnGrid from 'react-angrid';\nimport data from './data'\n\nfunction App() {\n  console.log(\"app\")\n  const [loading, setLoading] = useState(false);\n  const [rows, setRows] = useState([]);\n  const [filter, setFilter] = useState({\n    pageSize: 4,\n    pageNumber: 1,\n  });\n  const [totalCount, setTotalCount] = useState(3);\n\n  const _delete = (data) => {\n    setRows(rows.filter(x => x.userId !== data.userId))\n  }\n  const columns = [\n    {\n      field: \"userId\",\n      headerName: \"User Id\",\n      description: \"user id that is unique\",\n      width: 50,\n    },\n    {\n      field: \"fullName\",\n      headerName: \"Fullname\",\n      description: \"full name of user\",\n      width: 100,\n      sortable: true\n    },\n    {\n      field: \"age\",\n      headerName: \"Age\",\n      description: \"age of user\",\n      width: 50,\n    },\n    {\n      field: \"delete\",\n      headerName: \"delete(component cell)\",\n      description: \"delete user\",\n      width: 50,\n      renderCell: (row) => {\n        return row.data.userId === 1 ? \"-\" : <button onClick={() => _delete(row.data)}>X</button>\n      }\n    }\n  ];\n  let active = true;\n  //=== events\n  const _fetchData = async () => {\n    console.log('=== fetch data');\n    if (!active) return;\n    //mock api, you can call your api then set data to table like commented line below\n    return new Promise((resolve) => {\n      setLoading(true);\n      setTimeout(() => {\n        if (filter.pageNumber === 1)\n          setRows(data.filter(x => x.userId < 5));// Set Rows\n        else\n          setRows(data.filter(x => x.userId >= 5));// SetRows\n        setTotalCount(7);//=== set total page size for pagination part\n        resolve();\n        setLoading(false);\n      }, 2000);\n    });\n  }\n\n  useEffect(() => {\n    _fetchData();\n    return () => {\n      active = false;\n    }\n  }, [filter]);\n  const _handlePageChange = (newPage) => {\n    setFilter((p) => ({ ...p, pageNumber: newPage }));\n  }\n  return (\n    <div className=\"app\">\n      <h1>an grid</h1>\n      <p>simple data grid with paging, sorting and rtl support</p>\n      <hr />\n      <h2>minimal feature</h2>\n      <AnGrid\n        columns={columns}\n        rows={rows}\n        showRowNumber={true}\n        disabledPaging={true}\n      />\n      <h2>full feature</h2>\n      <AnGrid\n        loading={loading}\n        columns={columns}\n        rows={rows}\n        showRowNumber={true}\n        pageSize={filter.pageSize}\n        pageNumber={filter.pageNumber}\n        totalCount={totalCount}\n        onPageChange={_handlePageChange}\n        theme=\"dark\"\n        minHeight={300}\n        emptyList={<strong>There Is No Info</strong>}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","D:\\projects\\kingofday\\react-angrid\\src\\reportWebVitals.js",[],"D:\\projects\\kingofday\\react-angrid\\src\\data.js",[],"D:\\projects\\kingofday\\react-angrid\\src\\lib\\index.jsx",[],"D:\\projects\\kingofday\\react-angrid\\src\\lib\\components\\AnGrid.js",["31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":73,"column":16,"nodeType":"38","endLine":73,"endColumn":21},{"ruleId":"36","severity":1,"message":"39","line":39,"column":6,"nodeType":"40","endLine":39,"endColumn":18,"suggestions":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react-hooks/exhaustive-deps","Assignments to the 'active' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has a missing dependency: 'formatData'. Either include it or remove the dependency array.","ArrayExpression",["44"],"no-global-assign","no-unsafe-negation",{"desc":"45","fix":"46"},"Update the dependencies array to be: [formatData, props.rows]",{"range":"47","text":"48"},[1233,1245],"[formatData, props.rows]"]