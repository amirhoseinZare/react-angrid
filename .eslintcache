[{"D:\\ASA\\react-angrid\\src\\index.js":"1","D:\\ASA\\react-angrid\\src\\reportWebVitals.js":"2","D:\\ASA\\react-angrid\\src\\App.js":"3","D:\\ASA\\react-angrid\\src\\data.js":"4","D:\\ASA\\react-angrid\\src\\lib\\index.jsx":"5","D:\\ASA\\react-angrid\\src\\lib\\components\\AnGrid.js":"6"},{"size":517,"mtime":1655795469360,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1655795469365,"results":"9","hashOfConfig":"8"},{"size":4415,"mtime":1656857858128,"results":"10","hashOfConfig":"8"},{"size":963,"mtime":1656857653894,"results":"11","hashOfConfig":"8"},{"size":65,"mtime":1655795469364,"results":"12","hashOfConfig":"8"},{"size":6171,"mtime":1656857578723,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1fl034r",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"D:\\ASA\\react-angrid\\src\\index.js",[],["28","29"],"D:\\ASA\\react-angrid\\src\\reportWebVitals.js",[],"D:\\ASA\\react-angrid\\src\\App.js",["30"],"D:\\ASA\\react-angrid\\src\\data.js",[],"D:\\ASA\\react-angrid\\src\\lib\\index.jsx",[],"D:\\ASA\\react-angrid\\src\\lib\\components\\AnGrid.js",["31"],"import React, { useState, useEffect, forwardRef, useImperativeHandle, } from \"react\";\r\nimport './angrid.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AnGrid = forwardRef((props, ref) => {\r\n  //=== init\r\n  const formatData = (data, formatted) => {\r\n    if (formatted)\r\n      return [...data.map((r, idx) => ({\r\n        ...r,\r\n        dataRowNumber: ((props.pageNumber || 1) - 1) * (props.pageSize || 9999) + idx + 1\r\n      }))];\r\n    else\r\n      return [...data.map((r, idx) => ({\r\n        data: { ...r },\r\n        hide: r.hide || false,\r\n        index: idx,\r\n        dataRowNumber: ((props.pageNumber || 1) - 1) * (props.pageSize || 9999) + idx + 1\r\n      }))];\r\n  }\r\n  const strings = props.strings || {};\r\n  //=== Hooks\r\n  const [rows, setRows] = useState(props.rows ? formatData(props.rows) : []);\r\n  const [columns, setColumns] = useState(props.columns);\r\n  //=== Recoil\r\n  const _handlePageChange = (newPage) => {\r\n    if (props.onPageChange) props.onPageChange(newPage);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRows(formatData(props.rows));\r\n  }, [props.rows, props.pageSize]);\r\n  useEffect(() => {\r\n    setColumns(props.columns);\r\n  }, [props.columns]);\r\n  //=== sort method\r\n  const _hanndleSort = (field) => {\r\n    let col = columns.find(x => x.field === field);\r\n    switch (col.sort) {\r\n      case 1:\r\n        col.sort = 2;\r\n        setColumns([...columns]);\r\n        setRows(r => formatData(r.sort((a, b) => {\r\n          if (a.data[col.field].toString() < b.data[col.field].toString())\r\n            return -1;\r\n          if (a.data[col.field].toString() > b.data[col.field].toString())\r\n            return 1;\r\n          return 0;\r\n        }), true));\r\n        break;\r\n      case 2:\r\n        col.sort = 0;\r\n        setColumns([...columns]);\r\n        setRows(formatData(props.rows));\r\n        break;\r\n      default:\r\n        col.sort = 1;\r\n        setColumns([...columns]);\r\n        setRows(r => formatData(r.sort((a, b) => {\r\n          if (a.data[col.field].toString() < b.data[col.field].toString())\r\n            return 1;\r\n          if (a.data[col.field].toString() > b.data[col.field].toString())\r\n            return -1;\r\n          return 0;\r\n        }), true));\r\n        break;\r\n    }\r\n  }\r\n  useImperativeHandle(ref, () => ({\r\n    addRow: (row, prepend) => {\r\n      row[\"hide\"] = row[\"hide\"] || false;\r\n      if (prepend) setRows((p) => [row, ...p]);\r\n      else setRows((p) => [...p, row]);\r\n    },\r\n    addRows: (newRows, prepend) => {\r\n      if (prepend)\r\n        setRows((p) => [\r\n          ...formatData(newRows),\r\n          ...p,\r\n        ]);\r\n      else\r\n        setRows((p) => [\r\n          ...p,\r\n          ...formatData(newRows),\r\n        ]);\r\n    },\r\n    hideRow: (idx) => {\r\n      let tempRows = [...rows];\r\n      let row = {\r\n        ...tempRows[idx],\r\n        hide: true,\r\n      };\r\n      tempRows[idx] = row;\r\n      setRows((p) => [...tempRows]);\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <div className={`angrid ${(props.theme || 'dark')} ${props.className || null} ${rows.length === 0 ? \"is-empty\" : null}`} style={{ minHeight: props.minHeight || 300, paddingBottom: (props.disabledPaging ? 0 : 45) }}>\r\n      {!props.loading && rows.length === 0 ? (\r\n        props.emptyList ? props.emptyList :\r\n          <p className=\"empty\">\r\n            {strings.notFound || \"There Is No Data\"}\r\n          </p>\r\n\r\n      ) : null}\r\n      {props.loading ?\r\n        <div className='loader'>\r\n          <div className=\"spinner\"></div>\r\n        </div> : null}\r\n      {rows.length !== 0 ? (\r\n        <>\r\n          <table>\r\n            <thead className='thead'>\r\n              <tr>\r\n                {props.showRowNumber ? <th\r\n                  style={{ width: 25 }}\r\n                  title={(strings.indexTitle || \"Row Number\")}\r\n                >#</th> : null}\r\n                {columns.map((c, idx) => (\r\n                  <th\r\n                    style={{ width: c.width || 85, cursor: c.sortable ? 'pointer' : 'auto' }}\r\n                    title={c.description}\r\n                    key={idx}\r\n                    {...(c.sortable ? { onClick: () => _hanndleSort(c.field) } : {})}\r\n                  >\r\n                    {c.headerName}\r\n                    {c.sortable ? <span className='sort-icon'>↑↓</span> : null}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody className='tbody'>\r\n              {rows\r\n                .filter((x) => !x.hide)\r\n                .map((r, i) => (\r\n                  <tr\r\n                    key={i}\r\n                    className={props.rowClass ? props.rowClass(r) : null}\r\n                  >\r\n                    {props.showRowNumber ? <td>\r\n                      <span>{r.dataRowNumber}</span>\r\n                    </td> : null}\r\n\r\n                    {columns.map((c, j) => (\r\n                      <td className={c.cellClass ? c.cellClass(r) : \"\"} key={j}>\r\n                        {c.renderCell ? c.renderCell(r) : <span>{r.data[c.field]}</span>}\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n          {!props.disabledPaging ? props.customPagination ||\r\n            <div className='angrid-pagination'>\r\n              <span>{strings.pageNumber || \"Page Number\"}</span>\r\n              <button\r\n                onClick={() => _handlePageChange(props.pageNumber - 1)}\r\n                disabled={props.pageNumber === 1}\r\n              >\r\n                {\"‹\"}\r\n              </button>\r\n              <strong>{props.pageNumber}</strong>\r\n              <button\r\n                onClick={() => _handlePageChange(props.pageNumber + 1)}\r\n                disabled={props.pageNumber * props.pageSize > props.totalCount}\r\n              >\r\n                {\"›\"}\r\n              </button>\r\n            </div> : null}\r\n        </>\r\n      ) : null\r\n      }\r\n    </div >\r\n  );\r\n});\r\n\r\nAnGrid.propTypes = {\r\n  columns: PropTypes.array.isRequired,\r\n  rows: PropTypes.array.isRequired,\r\n  onPageChange: PropTypes.func,\r\n  loading: PropTypes.bool,\r\n  showRowNumber: PropTypes.bool,\r\n  totalCount: PropTypes.number,\r\n  paging: PropTypes.bool,\r\n}\r\nexport default AnGrid;\r\n",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":73,"column":16,"nodeType":"38","endLine":73,"endColumn":21},{"ruleId":"36","severity":1,"message":"39","line":32,"column":6,"nodeType":"40","endLine":32,"endColumn":34,"suggestions":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react-hooks/exhaustive-deps","Assignments to the 'active' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has a missing dependency: 'formatData'. Either include it or remove the dependency array.","ArrayExpression",["44"],"no-global-assign","no-unsafe-negation",{"desc":"45","fix":"46"},"Update the dependencies array to be: [props.rows, props.pageSize, formatData]",{"range":"47","text":"48"},[1056,1084],"[props.rows, props.pageSize, formatData]"]